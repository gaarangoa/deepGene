import sys
import argparse
import json
from motif2json import main as motifToJsonMain
from mergerFeatures import main as mergeFeatures
from train import main as trainModel
from train import weights
from train import regression as trainRegression
from predict import main as Predictor


def motif2json(args):
    motifToJsonMain(args.input, args.output)

def merger(args):
    mergeFeatures(args)

def train(args):
    trainModel(args)

def featureWeights(args):
    weights(args)

def regression(args):
    trainRegression(args)

def predictor(args):
    Predictor(args)

def main():
    parser = argparse.ArgumentParser(prog="deepGene", description="welcome to the amazing deepGene software")
    subparsers = parser.add_subparsers(help="type the command name for help", title="commands", description="valid subcomands")
    
    # parser for the motif2json utility
    motifToJsonParser = subparsers.add_parser('motif2json', help='This program takes the results from the motif finding and parses that file into a json file')
    motifToJsonParser.add_argument('--input', help='input motif generated by FIMO', required=True)
    motifToJsonParser.add_argument('--output', help="output json file", required=True)
    motifToJsonParser.set_defaults(func=motif2json)
    
    # merge features 
    mergerParser = subparsers.add_parser('mergeFeatures', help="merge different sets of features")
    mergerParser.add_argument('--features', nargs='+', help='List of feature files', required=True)
    # mergerParser.add_argument('--labels', help='File with labels of each gene', required=True)
    mergerParser.add_argument('--genes', help='File with gene ids that are considered for the analysis. If the file is empty all genes are used')
    mergerParser.add_argument('--output', help='output hdf5 format dataset', required=True)
    mergerParser.set_defaults(func=merger)

    # training module
    mergerParser = subparsers.add_parser('train', help="merge different sets of features")
    mergerParser.add_argument('--dataset', help='dataset containing the features and labels', required=True)
    mergerParser.add_argument('--model', help='output directory where to write the model', required=True)
    mergerParser.add_argument('--test', help='the fraction of the dataset to be used for validation 0.33', required=True, type=float)
    mergerParser.add_argument('--epochs', help='number of epochs the deep learning has to run', required=True, type=int)
    mergerParser.add_argument('--batch_size', help='batch size of the dl', required=True, type=int)
    # mergerParser.add_argument('--validation', nargs='+', help='setup a crossvalidation')
    # mergerParser.add_argument('--fullmodel', nargs='+', help='build a production model with the whole dataset [no crossvalidation]')
    mergerParser.set_defaults(func=train)

    # get weights for the feature vector
    wParser = subparsers.add_parser('weights', help="get the max weigths of each feature in the first layer")
    wParser.add_argument('--dataset', help='dataset containing the features and labels', required=True)
    wParser.add_argument('--model', help='model input file', required=True)
    wParser.add_argument('--weights', help='output file where to write the weights', required=True)
    wParser.set_defaults(func=featureWeights)

    # training module
    regParser = subparsers.add_parser('regression', help="train a regression model")
    regParser.add_argument('--dataset', help='dataset containing the features and labels', required=True)
    regParser.add_argument('--model', help='output directory where to write the model', required=True)
    regParser.add_argument('--test', help='the fraction of the dataset to be used for validation 0.33', required=True, type=float)
    regParser.add_argument('--epochs', help='number of epochs the deep learning has to run', required=True, type=int)
    regParser.add_argument('--batch_size', help='batch size of the dl', required=True, type=int)
    regParser.set_defaults(func=regression)

    # predict a new entry
    pred_parser = subparsers.add_parser('prediction', help="predict expression level")
    pred_parser.add_argument('--input', help='input gene in fasta format', required=True)
    pred_parser.add_argument('--model', help='trained model', required=True)
    # regParser.add_argument('--output', help='where to store the results', required=True, type=float)
    pred_parser.add_argument('--kmers', help='file with the selected features .wg', required=True)
    pred_parser.set_defaults(func=predictor)

    # parser input files
    args = parser.parse_args()
    args.func(args)


